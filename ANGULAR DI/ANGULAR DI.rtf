{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\fnil\fcharset0 HelveticaNeue-Bold;\f2\fswiss\fcharset0 Helvetica;
\f3\fnil\fcharset0 HelveticaNeue;\f4\fnil\fcharset0 Roboto-Light;\f5\fnil\fcharset0 Verdana;
\f6\fnil\fcharset0 Verdana-Bold;\f7\fnil\fcharset0 Monaco;\f8\fswiss\fcharset0 Arial-BoldMT;
\f9\froman\fcharset0 Times-Roman;\f10\fmodern\fcharset0 Courier;\f11\fnil\fcharset0 HelveticaNeue-Italic;
\f12\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red10\green9\blue26;
\red239\green239\blue239;\red52\green52\blue52;\red38\green38\blue38;\red237\green237\blue237;\red239\green239\blue239;
\red14\green110\blue109;\red246\green246\blue255;\red107\green0\blue109;\red10\green86\blue216;\red210\green0\blue53;
\red24\green25\blue27;\red83\green85\blue2;\red237\green237\blue237;\red251\green0\blue7;\red238\green76\blue77;
\red236\green239\blue237;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c3922\c3922\c13725;
\cssrgb\c94902\c94902\c94902;\cssrgb\c26667\c26667\c26667;\cssrgb\c20000\c20000\c20000;\cssrgb\c94510\c94510\c94510;\cssrgb\c94902\c94902\c94902;
\cssrgb\c0\c50196\c50196;\cssrgb\c97255\c97255\c100000;\cssrgb\c50196\c0\c50196;\cssrgb\c0\c43529\c87843;\cssrgb\c86667\c6667\c26667;
\cssrgb\c12549\c12941\c14118;\cssrgb\c40000\c40000\c0;\cssrgb\c94510\c94510\c94510\c20000;\cssrgb\c100000\c0\c0;\cssrgb\c95686\c39216\c37255;
\cssrgb\c94118\c94902\c94510;}
\paperw11900\paperh16840\margl1440\margr1440\vieww33400\viewh18300\viewkind0
\deftab720
\pard\pardeftab720\sl441\partightenfactor0

\f0\fs48 \cf2 \expnd0\expndtw0\kerning0
Zie: https://angular.io/guide/dependency-injection-providers\
https://codecraft.tv/courses/angular/dependency-injection-and-providers/summary/\
\
Dep providers (useClass, useValue)\
https://www.youtube.com/watch?v=T1xmCC4y3xo\
\
\
See: https://www.youtube.com/watch?v=bSRO73xmFQ8\
\
\
https://dev.to/this-is-angular/tree-shakable-dependencies-in-angular-projects-1ifg\
\
\
- pros /cons DI in general\
\
\pard\pardeftab720\sl993\sa172\partightenfactor0

\f1\b\fs86\fsmilli43200 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 What are NgModules?\
\pard\pardeftab720\sa660\partightenfactor0

\f2\b0\fs44 \cf4 \strokec4 Angular libraries like RouterModule, BrowserModule, and FormsModule are NgModules.\'a0{\field{\*\fldinst{HYPERLINK "https://material.angular.io/"}}{\fldrslt \ul Angular Material}}, which is a third party tool, is also a type of NgModule.\
\pard\pardeftab720\partightenfactor0
\cf4 NgModules consist of files and code related to a specific domain or that have a similar set of functionalities.
\f0\fs48 \cf2 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sl441\partightenfactor0
\cf2 \
- lazy loading? Show it via routing !!!\
\pard\pardeftab720\partightenfactor0

\f3\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The Services provided in the\'a0
\fs30\fsmilli15300 \cb5 @ngModule
\fs36 \cb3 \'a0of the\'a0{\field{\*\fldinst{HYPERLINK "https://www.tektutorialshub.com/angular/angular-lazy-loading/"}}{\fldrslt lazy loaded module}}\'a0are available\'a0
\f1\b in that module only
\f3\b0 .
\f0\fs48 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sl441\partightenfactor0
\cf2 \
- provide in Root? ProvideIn \'91Platform\'92 and \'91any\'92, \'91model\'92. Ect\
- When to use platform injector?\
- Element Injector apart tekenen!!!\
\
\'97\
Why DI hierarchy?\
\
Determine the scope of the service \
\
\
\'97\'97\
\
Eagerly versus Lazy loaded modules?\
\
\pard\pardeftab720\partightenfactor0

\f4\fs32 \cf6 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 In the basic CLI-generated app, modules are eagerly loaded which means that they are all loaded when the application launches.\
\
Lazy loading is when you load modules only when you need them; for example, when using routing.
\f0\fs48 \cf2 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sl441\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\f4\fs32 \cf6 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 When the Angular router lazy-loads a module, it creates a new CHILD injector.\'a0
\f0\fs48 \cf2 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sl441\partightenfactor0
\cf2 \
Dependency providers:\
\pard\pardeftab720\partightenfactor0

\f5\fs34 \cf2 \cb3 the first part is the\'a0\'91
\f6\b injection
\f5\b0  
\f7\fs32 \cf7 \cb8 token\'92
\f5\fs34 \cf2 \cb3 \'a0and the second part is the\'a0
\f7\fs32 \cf7 \cb8 provider definition object.\

\f5\fs34 \cf2 \cb3 The class type of the provider definition object must be the same as the token class or its subclass.\
\
Injection token - 
\f3\fs36 The Injector uses the token to locate the\'a0
\fs30\fsmilli15300 \cb9 provider
\fs36 \cb3 \'a0in the\'a0
\fs30\fsmilli15300 \cb9 Providers
\fs36 \cb3 \'a0array.\
\pard\pardeftab720\sa540\partightenfactor0
\cf2 The Token can be either a\'a0
\fs30\fsmilli15300 \cb9 type
\fs36 \cb3 , a\'a0
\fs30\fsmilli15300 \cb9 string
\fs36 \cb3 \'a0or an instance of\'a0{\field{\*\fldinst{HYPERLINK "https://www.tektutorialshub.com/angular/injection-token-in-angular/"}}{\fldrslt 
\fs30\fsmilli15300 \cb9 InjectionToken}}.\
\pard\pardeftab720\partightenfactor0
\cf2 Provider definition object.\'a0It tells Angular how to create the instance of the dependency.\'a0
\f0\fs48 \cb1 \

\f3\fs36 \cb3 The Angular can create the instance of the dependency in 4 different ways:
\f0\fs48 \cb1 \
\pard\pardeftab720\sl441\partightenfactor0
\cf2 \
- use 
\f8\b Class
\f0\b0 \
\pard\pardeftab720\partightenfactor0
\cf2 -useValue\
\pard\pardeftab720\sl441\partightenfactor0
\cf2 \
- useExisting ???\
- useFactory ??? \
\
\
\'97\
\
\pard\pardeftab720\partightenfactor0

\f3\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The Angular provides\'a0{\field{\*\fldinst{HYPERLINK "https://www.tektutorialshub.com/angular/injection-token-in-angular/"}}{\fldrslt 
\fs30\fsmilli15300 \cb5 InjectionToken}}\'a0class so as to ensure that the Unique tokens are created. The Injection Token is created by creating a new instance of the\'a0
\fs30\fsmilli15300 \cb5 InjectionToken
\fs36 \cb3 \'a0class.
\f0\fs48 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sl441\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\f5\fs28 \cf10 \cb11 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 export \cf12 \strokec12 const\cf13 \strokec13  \cf2 \strokec2 API_URL=\cf13 \strokec13  
\f6\b \cf2 \strokec2 new
\f5\b0 \cf13 \strokec13  \cf2 \strokec2 InjectionToken\cf13 \strokec13 <
\f6\b \cf12 \strokec12 string
\f5\b0 \cf13 \strokec13 >\cf7 \strokec7 (\cf14 \strokec14 ''\cf7 \strokec7 );\cf13 \strokec13  
\f0\fs48 \cf2 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sl441\partightenfactor0
\cf2 \
\'97\'97\
\
\
- use 
\f8\b Class
\f0\b0 \
\pard\pardeftab720\partightenfactor0
\cf2 -useValue\
\pard\pardeftab720\sl441\partightenfactor0
\cf2 \
- useExisting ???\
- useFactory ??? \
\

\fs32 \cf15 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec15 \
\pard\pardeftab720\sl384\partightenfactor0
\cf15 Use useFactory 
\f8\b when the injection value should be computed at runtime
\f0\b0 ,\'a0
\f9\fs24 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\li80\ri80\sl576\sa213\qj\partightenfactor0

\f5\fs29\fsmilli14667 \cf2 \cb3 provide: configure the token that will be used in dependency injection.
\f9\fs24 \cb1 \

\f5\fs29\fsmilli14667 \cb3 useFactory: configures a factory method that can return objects, string, array, etc.
\f9\fs24 \cb1 \

\f5\fs29\fsmilli14667 \cb3 deps: configures the token that the injector will use to provide the dependency injection required by the factory method.
\f9\fs24 \cb1 \
\pard\pardeftab720\sl441\partightenfactor0

\f0\fs32 \cf15 \cb3 \strokec15 \

\fs48 \cf2 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
- Token ????\
\
- pros/ cons DI hierarchie?\
\
V - tree shaking\
\
- @Inject ???\
\
-\
\
\
- 
\f10\fs28\fsmilli14400 \cf16 \cb17 [\{\cf2  provide\cf16 :\cf2  \cf18 Logger\cf16 ,\cf2  useClass\cf16 :\cf2  \cf18 BetterLogger\cf2  \cf16 \}]\
\pard\pardeftab720\sl576\partightenfactor0
\cf16 [\{\cf2  provide\cf16 :\cf2  \cf18 Logger\cf16 ,\cf2  useExisting\cf16 :\cf2  \cf18 BetterLogger\cf2  \cf16 \}]\
\
\
LIVE EXAMPLE: https://stackblitz.com/run?file=package.json\
OR https://stackblitz.com/angular/rmoornyaomj?file=src%2Fapp%2Fcar.components.ts\
\
https://codesandbox.io/s/rlkjz2n43q?file=/index.js\
\
\
Wrapping up:\
\
\pard\pardeftab720\sa300\partightenfactor0

\f3\fs36 \cf7 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Dependency Injection is a\'a0way of\'a0architecting an\'a0application so code is easier to\'a0re-use, easier to\'a0test and\'a0easier to\'a0maintain.\cb1 \
\cb3 It\'92s a\'a0method of\'a0decoupling a\'a0piece of\'a0code from the\'a0dependencies it needs in\'a0order to\'a0run.\cb1 \
\cb3 It uses\'a0
\f11\i Inversion of\'a0Control
\f3\i0 \'a0so the\'a0responsibility of\'a0creating dependencies and\'a0and passing them in\'a0to dependent pieces of\'a0code is handled by\'a0something else.\cb1 \
\cb3 Angular comes with a\'a0Dependency Injection (DI) framework of\'a0its own and\'a0it\'92s used throughout Angular\'92s code.\cb1 \
\cb3 To\'a0understand how to\'a0use Angular and\'a0architect your application you need to\'a0have a\'a0very good understanding of\'a0the DI framework.\cb1 \
\cb3 The\'a0DI framework in\'a0Angular consists of\'a0four concepts working together:\cb1 \
\pard\pardeftab720\sl607\partightenfactor0

\f1\b \cf7 \cb3 Token\cb1 \
\pard\pardeftab720\sl607\sa300\partightenfactor0

\f3\b0 \cf7 \cb3 This uniquely identifies something that we want injected. A\'a0
\f11\i dependency
\f3\i0 \'a0of\'a0our code.\cb1 \
\pard\pardeftab720\sl607\partightenfactor0

\f1\b \cf7 \cb3 Dependency\cb1 \
\pard\pardeftab720\sl607\sa300\partightenfactor0

\f3\b0 \cf7 \cb3 The\'a0actual code we want injected.\cb1 \
\pard\pardeftab720\sl607\partightenfactor0

\f1\b \cf7 \cb3 Provider\cb1 \
\pard\pardeftab720\sl607\sa300\partightenfactor0

\f3\b0 \cf7 \cb3 This is a\'a0map between a\'a0
\f11\i token
\f3\i0 \'a0and\'a0a list of\'a0
\f11\i dependencies
\f3\i0 .\cb1 \
\pard\pardeftab720\sl607\partightenfactor0

\f1\b \cf7 \cb3 Injector\cb1 \
\pard\pardeftab720\sl607\sa300\partightenfactor0

\f3\b0 \cf7 \cb3 This is a\'a0function which when passed a\'a0
\f11\i token
\f3\i0 \'a0returns a\'a0
\f11\i dependency
\f3\i0 \'a0(or\'a0list of\'a0dependencies).\cb1 \
\pard\pardeftab720\sa300\partightenfactor0
\cf7 \cb3 We configure injectors with providers, Angular then uses these injectors to\'a0resolve dependencies using tokens and\'a0injecting them into constructors as\'a0arguments.\cb1 \
\cb3 There are four types of\'a0providers: a\'a0class provider, a\'a0value provider, a\'a0factory function provider and\'a0an alias provider.\cb1 \
\cb3 If we want a\'a0dependency to\'a0be shared across our entire application we would configure it on\'a0our\'a0
\f12\fs32\fsmilli16200 \cf19 \cb20 \strokec19 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 NgModule
\f3\fs36 \cf7 \cb3 \strokec7 \shad0 .\cb1 \
\cb3 If we want a\'a0separate instance of\'a0a dependency to\'a0be shared across each instance of\'a0a component and\'a0its children, we configure it on\'a0the component\'92s\'a0
\f12\fs32\fsmilli16200 \cf19 \cb20 \strokec19 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 providers
\f3\fs36 \cf7 \cb3 \strokec7 \shad0 \'a0property.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \
}